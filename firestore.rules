/**
 * @fileoverview Firestore Security Rules for the data synchronization application.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model, combined with
 * user-based ownership, to secure synchronization logs, admin reviews, and
 * admin user profiles. Admin roles are managed using "existence over content"
 * in the `roles_admin` collection.
 *
 * Data Structure:
 * - /sync_logs/{syncLogId}: Stores synchronization events. Accessible based on admin role.
 * - /admin_reviews/{adminReviewId}: Stores admin reviews of sync logs. Only admins can manage.
 * - /admins/{adminId}: Stores admin user profiles. Accessible only by the user themselves.
 * - /roles_admin/{adminId}: Indicates admin status. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Admin-only access to synchronization logs and reviews.
 * - User-ownership for admin profiles.
 * - No listing of admin profiles is allowed.
 * - Admin role is determined by the existence of a document in `roles_admin`.
 *
 * Denormalization for Authorization:
 * - The `AdminReview` entity includes the `adminId` field, denormalizing the link to the `Admin`
 *   entity. This allows security rules to directly check the reviewer's identity without
 *   performing additional `get()` operations.
 *
 * Structural Segregation:
 * - Admin roles are stored in a separate `roles_admin` collection to clearly define who has
 *   administrative privileges. This simplifies rule logic and improves security compared to
 *   embedding roles within the `Admin` document itself.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to synchronization logs.
     * @path /sync_logs/{syncLogId}
     * @allow (get, list): If the requesting user is an admin.
     * @allow (create, update, delete): If the requesting user is an admin.
     * @deny (get, list): If the requesting user is not an admin.
     * @deny (create, update, delete): If the requesting user is not an admin.
     * @principle Enforces admin-only access for managing synchronization logs.
     */
    match /sync_logs/{syncLogId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to admin reviews of synchronization logs.
     * @path /admin_reviews/{adminReviewId}
     * @allow (get, list): If the requesting user is an admin.
     * @allow (create, update, delete): If the requesting user is an admin.
     * @deny (get, list): If the requesting user is not an admin.
     * @deny (create, update, delete): If the requesting user is not an admin.
     * @principle Enforces admin-only access for managing admin reviews.
     */
    match /admin_reviews/{adminReviewId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to administrator user profiles.
     * @path /admins/{adminId}
     * @allow get: If the requesting user is the owner of the profile.
     * @allow create: If the requesting user's ID matches the document ID.
     * @allow update: If the requesting user is the owner of the profile and the profile exists.
     * @allow delete: If the requesting user is the owner of the profile and the profile exists.
     * @allow list: if false;
     * @deny get: If the requesting user is not the owner of the profile.
     * @deny create: If the requesting user's ID does not match the document ID.
     * @deny update: If the requesting user is not the owner of the profile.
     * @deny delete: If the requesting user is not the owner of the profile.
     * @principle Enforces user-ownership for accessing and modifying admin profiles.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId);
      allow update: if isExistingOwner(adminId);
      allow delete: if isExistingOwner(adminId);
    }

    /**
     * @description Determines admin roles using "existence over content".
     * @path /roles_admin/{adminId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @deny get: If the requesting user is not an admin.
     * @deny list: If the requesting user is not an admin.
     * @deny create: If the requesting user is not an admin.
     * @deny delete: If the requesting user is not an admin.
     * @principle Uses the existence of a document to grant admin privileges.
     */
    match /roles_admin/{adminId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}