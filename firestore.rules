/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and roles, while remaining flexible on data shapes to allow for rapid prototyping.
 * It enforces a combination of ownership-based access control and role-based access control for admin users. Data validation is minimized to enable agile development.
 *
 * Data Structure:
 * - `/sync_logs/{syncLogId}`: Stores synchronization logs, accessible to admins.
 * - `/admin_reviews/{adminReviewId}`: Stores admin reviews, accessible to admins and related admins.
 * - `/admins/{adminId}`: Stores administrator profiles, accessible only to the owning admin.
 * - `/roles_admin/{adminId}`: Indicates admin status; presence of a document grants admin privileges.  No content is enforced.
 * - `/readingDocuments/{documentId}`: Stores reading comprehension documents; intended to be publicly readable.
 * - `/mentalMathGames/{gameId}`: Stores mental math game results, readable by admins, writable by students for their own games.
 * - `/mathWordProblemGames/{gameId}`: Stores math word problem game results, readable by admins, writable by students for their own games.
 *
 * Key Security Decisions:
 * - Admin Role: Admin status is determined by the existence of a document in `/roles_admin/{adminId}`.
 * - Public Read for Reading Documents: The `/readingDocuments` collection is publicly readable.
 * - Student-Owned Game Data: Students can only create game records for themselves in `/mentalMathGames` and `/mathWordProblemGames`.
 * - Deny potentially dangerous operations: User listing is disallowed for admins.
 *
 * Denormalization for Authorization:
 * - `adminId` is denormalized into the `AdminReview` documents to allow direct authorization checks without additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to read and manage synchronization logs.
     * @path /sync_logs/{syncLogId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Role-based access control for admins.
     */
    match /sync_logs/{syncLogId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and manage admin reviews.
     * @path /admin_reviews/{adminReviewId}
     * @allow (get, list) if isAdmin() || isOwner(resource.data.adminId)
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin() && !isOwner(resource.data.adminId)
     * @deny (create, update, delete) if !isAdmin()
     * @principle Role-based and ownership-based access control.
     */
    match /admin_reviews/{adminReviewId} {
      allow get: if isAdmin() || (resource.data.adminId != null && isOwner(resource.data.adminId));
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to manage their own admin profiles.
     * @path /admins/{adminId}
     * @allow (get) if isOwner(adminId)
     * @allow (create) if isOwner(adminId)
     * @allow (update) if isOwner(adminId) && resource != null
     * @allow (delete) if isExistingOwner(adminId)
     * @allow list: if false;
     * @deny (get) if !isOwner(adminId)
     * @deny (create) if !isOwner(adminId)
     * @deny (update) if !isOwner(adminId) || resource == null
     * @deny (delete) if !isExistingOwner(adminId)
     * @deny list if true;
     * @principle Ownership-based access control.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId);
      allow update: if isOwner(adminId);
      allow delete: if isOwner(adminId);
    }

    /**
     * @description Determines admin status based on document existence.
     * @path /roles_admin/{adminId}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if true; // DO NOT CHANGE!  Used to grant Admin Role
     * @allow update: if false;
     * @allow delete: if true; // DO NOT CHANGE! Used to revoke Admin Role
     * @deny list if true;
     * @principle Role-based access control based on document existence.
     */
    match /roles_admin/{adminId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if true; // DO NOT CHANGE!  Used to grant Admin Role
        allow update: if false;
        allow delete: if true; // DO NOT CHANGE! Used to revoke Admin Role
    }

    /**
     * @description Allows public read access to reading documents.
     * @path /readingDocuments/{documentId}
     * @allow get: if true
     * @allow list: if true
     * @allow create: if isAdmin()
     * @allow update: if isAdmin() && resource != null
     * @allow delete: if isAdmin() && resource != null
     * @deny create: if !isAdmin()
     * @deny update: if !isAdmin()
     * @deny delete: if !isAdmin()
     * @principle Public read access with admin-only writes.
     */
    match /readingDocuments/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read mental math game results, and students to write their own results.
     * @path /mentalMathGames/{gameId}
     * @allow get: if isAdmin()
     * @allow list: if isAdmin()
     * @allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if !isAdmin()
     * @deny list: if !isAdmin()
     * @deny create: if !(isSignedIn() && request.resource.data.studentId == request.auth.uid)
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read with owner-only writes, enforced through the studentId field.
     */
    match /mentalMathGames/{gameId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read math word problem game results, and students to write their own results.
     * @path /mathWordProblemGames/{gameId}
     * @allow get: if isAdmin()
     * @allow list: if isAdmin()
     * @allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if !isAdmin()
     * @deny list: if !isAdmin()
     * @deny create: if !(isSignedIn() && request.resource.data.studentId == request.auth.uid)
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Public read with owner-only writes, enforced through the studentId field.
     */
    match /mathWordProblemGames/{gameId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == resource.data.userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}