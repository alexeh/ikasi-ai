{
  "entities": {
    "SyncLog": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SyncLog",
      "type": "object",
      "description": "Represents a synchronization event between Firebase and the local MySQL database.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the synchronization log entry."
        },
        "firebaseCollection": {
          "type": "string",
          "description": "The name of the Firebase collection that was synchronized."
        },
        "mysqlTable": {
          "type": "string",
          "description": "The name of the MySQL table that was synchronized."
        },
        "syncDirection": {
          "type": "string",
          "description": "The direction of the synchronization (e.g., Firebase to MySQL, MySQL to Firebase).",
          "format": "string"
        },
        "syncTimestamp": {
          "type": "string",
          "description": "The timestamp of when the synchronization occurred.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the synchronization (e.g., success, failure, pending)."
        },
        "details": {
          "type": "string",
          "description": "Detailed information about the synchronization process, including any errors or warnings."
        }
      },
      "required": [
        "id",
        "firebaseCollection",
        "mysqlTable",
        "syncDirection",
        "syncTimestamp",
        "status"
      ]
    },
    "AdminReview": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminReview",
      "type": "object",
      "description": "Represents an admin's review of a proposed synchronization event.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin review entry."
        },
        "syncLogId": {
          "type": "string",
          "description": "Reference to the SyncLog entity. (Relationship: SyncLog 1:N AdminReview)"
        },
        "reviewTimestamp": {
          "type": "string",
          "description": "The timestamp of when the review was performed.",
          "format": "date-time"
        },
        "decision": {
          "type": "string",
          "description": "The admin's decision on the synchronization (e.g., approve, reject)."
        },
        "justification": {
          "type": "string",
          "description": "The admin's justification for their decision, potentially generated by an LLM."
        },
        "adminId": {
          "type": "string",
          "description": "Reference to the Admin entity. (Relationship: Admin 1:N AdminReview)"
        }
      },
      "required": [
        "id",
        "syncLogId",
        "reviewTimestamp",
        "decision",
        "justification",
        "adminId"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user with access to the synchronization approval tool.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the administrator user."
        },
        "username": {
          "type": "string",
          "description": "The username of the administrator."
        },
        "email": {
          "type": "string",
          "description": "The email address of the administrator.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the administrator."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the administrator."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "firstName",
        "lastName"
      ]
    },
    "ReadingDocument": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ReadingDocument",
      "type": "object",
      "description": "Represents a document for reading comprehension exercises.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the document."
        },
        "content": {
          "type": "string",
          "description": "The full text content of the document."
        },
        "language": {
          "type": "string",
          "description": "The language of the document (e.g., 'euskera', 'gaztelania')."
        }
      },
      "required": ["title", "content", "language"]
    },
    "MentalMathGame": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MentalMathGame",
      "type": "object",
      "description": "Represents a single game session of the mental math exercise.",
      "properties": {
        "studentId": {
          "type": "string",
          "description": "The unique ID of the student who played the game."
        },
        "studentEmail": {
          "type": "string",
          "description": "The email of the student, for easier identification in statistics.",
          "format": "email"
        },
        "level": {
          "type": "string",
          "description": "The difficulty level of the game.",
          "enum": ["easy", "medium", "hard"]
        },
        "score": {
          "type": "number",
          "description": "The number of correct answers."
        },
        "problemsAttempted": {
          "type": "number",
          "description": "The total number of problems attempted by the student."
        },
        "incorrectAnswers": {
          "type": "number",
          "description": "The number of incorrect answers."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the game in seconds (e.g., 60)."
        },
        "timestamp": {
          "type": "string",
          "description": "The server timestamp when the game was completed.",
          "format": "date-time"
        }
      },
      "required": [
        "studentId",
        "studentEmail",
        "level",
        "score",
        "problemsAttempted",
        "incorrectAnswers",
        "duration",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/sync_logs/{syncLogId}",
        "definition": {
          "entityName": "SyncLog",
          "schema": {
            "$ref": "#/backend/entities/SyncLog"
          },
          "description": "Stores synchronization logs.  Admin roles (roles_admin/{uid}) determine who can read and potentially trigger synchronization actions.",
          "params": [
            {
              "name": "syncLogId",
              "description": "The unique ID of the synchronization log."
            }
          ]
        }
      },
      {
        "path": "/admin_reviews/{adminReviewId}",
        "definition": {
          "entityName": "AdminReview",
          "schema": {
            "$ref": "#/backend/entities/AdminReview"
          },
          "description": "Stores admin reviews of synchronization logs.  Each review is linked to a sync log via `syncLogId` and an admin via `adminId`. Includes denormalized 'adminId' for authorization independence.",
          "params": [
            {
              "name": "adminReviewId",
              "description": "The unique ID of the admin review."
            }
          ]
        }
      },
      {
        "path": "/admins/{adminId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Stores administrator user profiles.  This collection holds user data; access control is based on the user's ID.",
          "params": [
            {
              "name": "adminId",
              "description": "The unique ID of the administrator user."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{adminId}",
        "definition": {
          "entityName": "AdminRole",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "This collection exists to represent admin roles, using 'existence over content'.  If a document exists for a user ID in this collection, that user is considered an admin.",
          "params": [
            {
              "name": "adminId",
              "description": "The unique ID of the administrator user. For the simulated user 'jarambarri@aldapeta.eus', the ID will be 'jarambarri_aldapeta_eus'."
            }
          ]
        }
      },
      {
        "path": "/readingDocuments/{documentId}",
        "definition": {
          "entityName": "ReadingDocument",
          "schema": {
            "$ref": "#/backend/entities/ReadingDocument"
          },
          "description": "Stores reading comprehension documents.",
          "params": [
            {
              "name": "documentId",
              "description": "The unique ID of the reading document."
            }
          ]
        }
      },
      {
        "path": "/mentalMathGames/{gameId}",
        "definition": {
          "entityName": "MentalMathGame",
          "schema": {
            "$ref": "#/backend/entities/MentalMathGame"
          },
          "description": "Stores the results of each mental math game session. Admins can read all documents to generate statistics, while students can only write their own results.",
          "params": [
            {
              "name": "gameId",
              "description": "The unique ID of the game session."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the synchronization of data between Firebase and a local MySQL database, focusing on admin review and approval before synchronization. The structure prioritizes authorization independence, clarity, and security. It leverages structural segregation to ensure that documents within a collection share the same security requirements, and path-based ownership for private user data. The Admin entity and AdminReview entities are used to provide an extra layer of control, so data stored on MySQL is not blindly synced. The structure will enable list operations and maintains the integrity of ownership. I've added a new collection for `readingDocuments` to store the texts for the comprehension exercises. I've also added the `mentalMathGames` collection to store student game results for statistical analysis by the teacher."
  }
}
